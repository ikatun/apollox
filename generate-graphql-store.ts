import * as fs from 'fs';
import { lowerFirst } from 'lodash';
import { relative } from 'path';
import { getAllExistingQueries, IQueryInfo } from './get-all-existing-queries';

const rootPath = process.cwd();
const toNodePath = (x: string) => x.startsWith('.') ? x : `./${x}`;
const withoutExtension = (x: string) => x.substring(0, x.lastIndexOf('.'));

module.exports = (async () => {
  const allQueriesArray = getAllExistingQueries(rootPath);

  const generateQueryImport = (q: IQueryInfo) =>
    `import { ${q.exportName} } from '${toNodePath(relative(`${rootPath}/src/graphql/`, withoutExtension(q.filePath)))}';`;

  const generateQueryStore = (q: IQueryInfo) =>
    `  public ${lowerFirst(q.queryName)} = ${q.operationType}<${q.variablesType}, T.${q.queryName}>(${q.exportName});`;

  const generateStoreContent = () =>
    `/*** THIS FILE US AUTOGENERATED BY apollox, DON'T EDIT IT MANUALLY ***/

/* tslint:disable */
import { mutation, query } from './client';
import * as T from './types';

${allQueriesArray.map(generateQueryImport).join('\n')}

export class GraphqlStore {
${allQueriesArray.map(generateQueryStore).join('\n')}
}

export const graphqlStore = new GraphqlStore();`;

  fs.writeFileSync('./src/graphql/graphql-store.ts', generateStoreContent(), 'utf8');
  console.log('src/graphql/graphql-store.ts generated');
})();
