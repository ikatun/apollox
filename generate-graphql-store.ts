import * as fs from 'fs';
import { sync as globSync } from 'glob';
import { flatten, lowerFirst, map } from 'lodash';
import { relative } from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

const rootPath = process.cwd();

(async () => {
  await execAsync('npx apollo codegen:generate src/graphql/types.ts');

  const typesContent = fs.readFileSync(`${rootPath}/src/graphql/types.ts`, 'utf8');
  const withoutExtension = (x: string) => x.substring(0, x.lastIndexOf('.'));
  const toNodePath = (x: string) => x.startsWith('.') ? x : `./${x}`;

  function getOperationName(queryInstance: any) {
    const operationDefinition = queryInstance.definitions.filter((d: any) => d.kind === 'OperationDefinition')[0];

    return operationDefinition.name.value;
  }

  function getOperationType(queryInstance: any) {
    const operationDefinition = queryInstance.definitions.filter((d: any) => d.kind === 'OperationDefinition')[0];

    return operationDefinition.operation;
  }

  const queriesFiles = globSync(`${rootPath}/src/**/*queries.ts`);

  interface IQueryInfo {
    queryName: string;
    exportName: string;
    filePath: string;
    variablesType: string;
    operationType: string;
  }

  const allQueries = queriesFiles.map((filePath: string) =>
// tslint:disable-next-line
      map(require(filePath), (queryInstance: any, exportName: string): IQueryInfo => {
        const queryName = getOperationName(queryInstance);
        const variablesType = `${queryName}Variables`;

        return {
          queryName,
          exportName,
          filePath,
          variablesType: typesContent.includes(variablesType) ? `T.${variablesType}` : '{}',
          operationType: getOperationType(queryInstance),
        };
      }),
  );

  const allQueriesArray = flatten(flatten(allQueries));

  const generateQueryImport = (q: IQueryInfo) =>
    `import { ${q.exportName} } from '${toNodePath(relative(`${rootPath}/src/graphql/`, withoutExtension(q.filePath)))}';`;

  const generateQueryStore = (q: IQueryInfo) =>
    `  public ${lowerFirst(q.queryName)} = ${q.operationType}<${q.variablesType}, T.${q.queryName}>(${q.exportName});`;

  const generateStoreContent = () =>
    `/*** THIS FILE US AUTOGENERATED BY apollox, DON'T EDIT IT MANUALLY ***/

/* tslint:disable */
import { mutation, query } from './client';
import * as T from './types';

${allQueriesArray.map(generateQueryImport).join('\n')}

export class GraphqlStore {
${allQueriesArray.map(generateQueryStore).join('\n')}
}

export const graphqlStore = new GraphqlStore();`;

  console.log(generateStoreContent());
})();

